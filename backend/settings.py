"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os


BASE_DIR = Path(__file__).resolve().parent.parent

import os

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),  # Save logs to a file
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%#8tz%7q5291e%ahud5fsja=(c936r^6j!@f_naxliwk0x@hos'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://locationfinder-backend-dffaarfpgvgdcdas.eastus2-01.azurewebsites.net",
    "https://salmon-rock-0b662ee0f.6.azurestaticapps.net"
]
CORS_ALLOW_ALL_ORIGINS = True  # Temporarily allow all origins
CSRF_TRUSTED_ORIGINS = ["http://localhost:5173",
                       "https://locationfinder-backend-dffaarfpgvgdcdas.eastus2-01.azurewebsites.net",
                       "https://salmon-rock-0b662ee0f.6.azurestaticapps.net"]  # Include frontend origin
CORS_ALLOW_CREDENTIALS = True  # Allow cookies and authentication

from decouple import config

#OPENAI_API_KEY = config('OPENAI_API_KEY')
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app1',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
 #   'storages'
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',  # or JWT
    ],
    
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

#DATABASES = {
 #   'default': {
  #      'ENGINE': 'django.db.backends.postgresql',  # Specifies the PostgreSQL database backend
   #     'NAME': 'mydatabase1',  # The name of your PostgreSQL database
    #    'USER': 'postgres',  # The PostgreSQL username (usually 'postgres' by default)
     #   'PASSWORD': 'Sairam',  # The PostgreSQL password for the 'postgres' user
      #  'HOST': 'localhost',  # PostgreSQL is running locally (localhost), change if it's on a different server
       # 'PORT': '5432',  # Default PostgreSQL port
 #   }
#}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # Specifies the SQLite database backend
        'NAME': BASE_DIR / 'db.sqlite3',  # Path to the SQLite database file
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

#DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'app1.User'
# Media settings to upload images
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760 

#aws

import os
#from storages.backends.s3boto3 import S3Boto3Storage

# AWS Credentials (Store them securely in environment variables)
#AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
#AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
#AWS_STORAGE_BUCKET_NAME = "locationfindersowji"
#AWS_S3_REGION_NAME = "us-east-1"  # Change as per your AWS region

# Use S3 for Media Storage
#DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

# Make uploaded files publicly accessible (Optional)
#AWS_QUERYSTRING_AUTH = False
#AWS_S3_FILE_OVERWRITE = False
#AWS_DEFAULT_ACL = None

# Static and Media files settings (If required)
#AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
#MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/"

import os  

STATIC_URL = '/static/'  
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # This defines where static files should be collected
